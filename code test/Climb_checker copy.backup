using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Climb_checker : MonoBehaviour
{
    private character player;
    private float Lasttime;
    public float Climb_force = 6f;
    private float Begin_dist;
    private Vector3 Target_point;
    private Vector3 Target_Normal;
    public Transform climb_checker;
    public Animator animator;
    public Climbing_sort climbsort;

    private void Start()
    {
        player = GameObject.Find("character").GetComponent<character>();
        climb_checker = GameObject.Find("climb_checker").transform;
    }

    public void MoveTowardPoint()
    {
        Quaternion Lookrotation;
        float Distance;
        float Percent;
        character script = player.GetComponent<character>();

        transform.position = Vector3.Slerp(transform.position, (Target_point - transform.rotation * climb_checker.localPosition), Climb_force * Time.deltaTime);
        Lookrotation = Quaternion.LookRotation(-Target_Normal);
        transform.rotation = Quaternion.Slerp(transform.rotation, Lookrotation, Climb_force * Time.deltaTime);
        Distance = Vector3.Distance(transform.position, Target_point - transform.rotation * climb_checker.localPosition);
        Percent = -9f * (Begin_dist - Distance) / Begin_dist;

        if (Distance < 0.01f && climbsort == Climbing_sort.ClimbingTowardsPoints) {
            transform.position = Target_point - transform.rotation * climb_checker.localPosition;
            transform.rotation = Lookrotation;
            Lasttime = Time.time;
            climbsort = Climbing_sort.Climbing;
            if (script.enabled) {
                script.enabled = false;
            }
        }
        if (Distance < 0.25f && climbsort == Climbing_sort.ClimbingTowardsPlateau) {
            transform.position = Target_point - transform.rotation * climb_checker.localPosition;
            transform.rotation = Lookrotation;
            Lasttime = Time.time;
            climbsort = Climbing_sort.Walking;
            gameObject.GetComponent<Rigidbody>().isKinematic = false;
            script.enabled = true;
        }
    }
}

[System.Serializable]
public enum Climbing_sort {
    Walking,
    Jumping,
    Falling,
    Climbing,
    ClimbingTowardsPoints,
    ClimbingTowardsPlateau,
    CheckingForClimbStarting
}